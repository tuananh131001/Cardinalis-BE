server:
  port: 9002
spring:
  application:
    name: user-service
  datasource:
    username:  ${USER_DB:postgres}
    password: ${PASSWORD_DB:postgres}
    url: ${HOST_DB:jdbc:postgresql://localhost:3307/cardinalis}
    driver-class-name: ${DRIVER_DB:org.postgresql.Driver}
  cloud:
    service-registry:
      auto-registration:
        enabled: false
  jpa:
    defer-datasource-initialization: true
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: true
  security:
    oauth2:
      client:
        registration:
          github:
            client-id:  ${GITHUB_CLIENT_ID:581a14a284dd1d5815f5}
            client-secret:  ${GITHUB_CLIENT_SECRET:8c77af28a85cd5bc2063e007cb48116296767152}
            redirect-uri:  "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - user:email
              - read:user
jwt:
  header: Authorization
  secret: dejavu
  expiration: 6048000
# Default user
admin:
  id: 1b2fe584-19b4-4173-9d3d-02acf970faa6
  username: jjeanjacques10
  email: jjeanjacques10@github.com
  password: 12345
  isHotUser: true
app:
  auth:
    tokenSecret: 04ca023b39512e46d0c2cf4b48d5aac61d34302994c87ed4eff225dcf3b0a218739f3897051a057f9b846a69ea2927a587044164b7bae5e1306219d50b588cb1
    tokenExpirationMsec: 864000000
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris: "http://localhost:5173/oauth2/redirect"
#  http://localhost:9002/oauth2/authorize/github?redirect_uri=http://localhost:5173/oauth2/redirect