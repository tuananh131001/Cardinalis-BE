server:
  port: 3002
spring:
  application:
    name: tweet-service

  datasource:
    username: ${USER_DB:postgres}
    password: ${PASSWORD_DB:postgres}
    url: ${HOST_DB:jdbc:postgresql://localhost:3306/cardinalis}
    driver-class-name: ${DRIVER_DB:org.postgresql.Driver}
  cloud:
    service-registry:
      auto-registration:
        enabled: false
  jpa:
    defer-datasource-initialization: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: true
  security:
    oauth2:
      client:
        registration:
          github:
            client-id: ${GITHUB_CLIENT_ID:581a14a284dd1d5815f5}
            client-secret: ${GITHUB_CLIENT_SECRET:8c77af28a85cd5bc2063e007cb48116296767152}
            redirect-uri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - user:email
              - read:user
  redis:
    host: 34.118.240.76
#    host: ${REDIS_URL:localhost}
    port: 6380

  kafka:
    consumer:
      bootstrap-servers: 34.118.240.76:9093
      group-id: group_id
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: '*'
    producer:
      bootstrap-servers: 34.118.240.76:9093
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

jwt:
  header: Authorization
  secret: dejavu
  expiration: 6048000

#constant:
#  user_local_url: http://localhost:3003
#  api_cloud_url: http://cardinalis-be.live
#  api_url: http://localhost:3003

